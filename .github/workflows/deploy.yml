name: üöÄ Deploy

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

env:
  # This reliably gets the branch name regardless of event type
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  # Node.js version to use throughout the workflow
  NODE_VERSION: 20.11.1

jobs:
  format:
    name: üëî Format
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üëî Format
        run: npm run format:check

  lint:
    name: ‚¨£ ESLint
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: üì¶ Install dependencies
        run: npm ci

      - name: ‚¨£ Lint
        run: npm run lint

  types:
    name:  ¶ Types check
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: üì¶ Install dependencies
        run: npm ci

      - name:  ¶ Types check
        run: npm run test:types

  unit-tests:
    name: ‚ö°Ô∏è Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üìã Copy environment variables
        run: cp .dev.vars.example .dev.vars

      - name: üóÑÔ∏è Database setup
        run: npm run db:setup

      - name: ‚ö°Ô∏è Run Vitest
        run: npm run test:coverage

  e2e-tests:
    name: üé≠ E2E tests
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: [format, lint, types, unit-tests]
    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üìã Copy environment variables
        run: cp .dev.vars.example .dev.vars

      - name: üè∑Ô∏è Store Playwright Version
        run: echo "PLAYWRIGHT_VERSION=`npx playwright -V | cut -d ' ' -f2`" >> $GITHUB_ENV

      - name: üìù Cache Playwright Browsers
        id: cache-playwright-browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ env.PLAYWRIGHT_VERSION }}

      - name: üì¶ Install Playwright Browsers
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      - name: üõ†Ô∏è Build
        run: npm run build

      - name: üóÑÔ∏è Database setup
        run: npm run db:setup

      - name: üé≠ Run Playwright tests
        run: npm run test:e2e

  database:
    name: üöö Database migration
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.ref == 'refs/heads/main' || github.event.pull_request.draft == false
    concurrency:
      group: database-${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
    env:
      CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
      CLOUDFLARE_DATABASE_ID: ${{ github.ref == 'refs/heads/main' && vars.CLOUDFLARE_DATABASE_ID_PRODUCTION || vars.CLOUDFLARE_DATABASE_ID_PREVIEW }}
    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üöö Database migration
        run: npx drizzle-kit migrate
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: [database]
    permissions:
      contents: read
      deployments: write
    outputs:
      page_url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üõ†Ô∏è Build
        run: npm run build

      - name: üöÄ Deploy
        uses: cloudflare/wrangler-action@v3
        id: deploy
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy build/client --project-name=${{ vars.CLOUDFLARE_PROJECT_NAME }} --branch=${{ env.BRANCH_NAME }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  smoke-tests:
    name: üö¨ Smoke tests
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: [deploy]
    if: ${{ vars.CLOUDFLARE_ACCESS_CLIENT_ID }}
    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üè∑Ô∏è Store Playwright Version
        run: echo "PLAYWRIGHT_VERSION=`npx playwright -V | cut -d ' ' -f2`" >> $GITHUB_ENV

      - name: üìù Cache Playwright Browsers
        id: cache-playwright-browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ env.PLAYWRIGHT_VERSION }}

      - name: üì¶ Install Playwright Browsers
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      - name: üö¨ Run smoke tests
        run: npm run test:smoke
        env:
          TEST_PAGE_URL: ${{ needs.deploy.outputs.page_url }}
          CLOUDFLARE_ACCESS_CLIENT_ID: ${{ vars.CLOUDFLARE_ACCESS_CLIENT_ID }}
          CLOUDFLARE_ACCESS_CLIENT_SECRET: ${{ secrets.CLOUDFLARE_ACCESS_CLIENT_SECRET }}
